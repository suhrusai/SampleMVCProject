# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  REPO_SECRET : ${{ secrets.REPO_SECRET }}
  WEBAPP_NAME: SampleMVCProject.sln     # set this to your application's name
  WEBAPP_PACKAGE_PATH: 'published1'      # set this to the path to your web app project, defaults to the repository root
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  job1:
    runs-on: windows-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        shell: bash
        run: echo "::set-output name=matrix::{\"include\":[{\"project\":\"foo\",\"config\":\"Debug\"},{\"project\":\"bar\",\"config\":\"Release\"}]}"
  job2:
    needs: job1
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJSON(needs.job1.outputs.matrix)}}
    steps:
      - name : Nameee!!!!
        run : echo "hello"
#     steps:
#       - run: build
#   # This workflow contains a single job called "build"
#   build:
#     environment : Test
#     # The type of runner that the job will run on
#     runs-on: self-hosted
#     outputs: 
# #       matrix: ${{ steps.set-matrix.outputs.matrix }}
#       matrix-json: ${{ steps.set-matrix.outputs.matrix }}

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       - name: Github Secret
#         run: echo ${{ env.REPO_SECRET }}
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v2
#       - name: Setup MSBUild
#         uses: microsoft/setup-msbuild@v1.1
#       - id: set-matrix
#         run: echo ::set-output name=matrix::${{ env.REPO_SECRET }}
#       - name: Setup NUGet
#         uses: NuGet/setup-nuget@v1.0.5
       
#       - name: Adding Factset Packagesource
#         run : nuget sources add -name "Factset" -Source http://artifactory.factset.com/artifactory/api/nuget/nuget


# #         run: dotnet nuget add source 'http://artifactory.factset.com/artifactory/api/nuget/nuget' --name 'Factset'
#       - name: Creating matrix
#         run: |
#           $Jobs = @()

#           @('seployment-test1') | ForEach-Object {
#             $Jobs += @{
#               computername = "$_"
#             }
#           }

#           Write-Host ::set-output name=matrix::$($Jobs | ConvertTo-JSON -Compress)
#       - name: Restore NuGet Packages
#         run: nuget restore SampleMVCProject.sln
        
#       - name: Build Solution
#         run: msbuild SampleMVCProject.sln /p:Configuration=Release

#       - name: Build and Publish to folder
#         run: msbuild ${{ env.WEBAPP_NAME }} /p:Configuration=Release /p:DeployOnBuild=true /t:WebPublish /p:WebPublishMethod=FileSystem /p:publishUrl=${{ env.WEBAPP_PACKAGE_PATH }} /p:PackageAsSingleFile=false
#       - name :  Zip Bin folder
#         run : Compress-Archive ".\bin" -DestinationPath "archive.zip"
#       - name: Publish artifacts
#         uses: actions/upload-artifact@v2
#         with:
#           name: "Build.zip"
#           path: "./archive.zip"
# #       -name: 
# #   deploy_on_omen:
# #     needs: build
# #     runs-on : [deployment-test]
# #     steps:
# #       - name: Download Artifacts
# #         uses: actions/download-artifact@v2
# #         with:
# #           name: "Hello.zip"

#   deploy:
#       needs: build
#       strategy:
#         fail-fast: false
#         matrix:
#           include: ${{ fromJson(needs.matrix.outputs.matrix-json) }}
#       runs-on: ${{needs.build.outputs.matrix}}
# #     strategy:
#       steps:
#         - name : matrix output
#           run: echo ${{needs.build.outputs.matrix}}
#         - name: Download Artifacts
#           uses: actions/download-artifact@v2
#           with:
#             name: "Build.zip"
#         - name: Github Secret
#           run: echo {{ secret.SERVER_NAMES }}
#         - name: Decompress download build zip
#           run : Expand-Archive -Path ".\archive.zip" -DestinationPath "C:\" -Force

#        #   with:
#         #   name: webapp
#          #  path: ${{ env.WEBAPP_PACKAGE_PATH }}  
